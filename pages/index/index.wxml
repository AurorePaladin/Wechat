<!--index.wxml-->
<!-- 
   框架最大的特点就是让开发者必须按照特定的方式编写代码
 -->
<!-- 
   1.数据在哪儿   当前页面的data属性中！
   2.绑定到哪里去  想绑定到哪儿就在哪里用mustache语法输出
 -->

<view class="container">
  <!-- 这种{{}}的语法叫做 mustache  -->
  <text> {{ message }}</text>

  <text>{{ person.name }}</text>
  <text>{{ person.age }}</text>


  <!-- 
   mustache语法可以用在：
   1. innerHTML(类似，小程序没有这个)
   2. 元素的属性上
   不能用在 标签名 和 属性名 上面，只能用在 值 上面
   -->


   <view class="world {{ viewClassName }}"></view>


   <!-- 
   可以直接使用字面量和简单的逻辑运算符
 -->

   <text>{{ 'hello' }}</text>
   <text>{{ 111 }}</text>
   <text>{{ 111 + 999 }}</text>
   <text>{{ 100 > 50 ? '你对了' : '你错了' }}</text>

<!-- 
  当语法解析误解了true和false的情况 可以使用mustache语法 {{}} 解决
 -->
  <checkbox checked='{{ false }}'></checkbox>

  <!-- <view class="userinfo">
    <button wx:if="{{!hasUserInfo && canIUse}}" open-type="getUserInfo" bindgetuserinfo="getUserInfo"> 获取头像昵称 </button>
    <block wx:else>
      <image bindtap="bindViewTap" class="userinfo-avatar" src="{{userInfo.avatarUrl}}" mode="cover"></image>
      <text class="userinfo-nickname">{{userInfo.nickName}}</text>
    </block>
  </view>
  <view class="usermotto">
    <text class="user-motto">{{motto}}</text>
  </view> -->
</view>
