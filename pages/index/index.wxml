<!--index.wxml-->
<!-- 
   框架最大的特点就是让开发者必须按照特定的方式编写代码
 -->
<!-- 
   1.数据在哪儿   当前页面的data属性中！
   2.绑定到哪里去  想绑定到哪儿就在哪里用mustache语法输出
 -->

<view class="container">
  <!-- 这种{{}}的语法叫做 mustache  -->
  <!-- <text> {{ message }}</text>

  <text>{{ person.name }}</text>
  <text>{{ person.age }}</text> -->


  <!-- 
   mustache语法可以用在：
   1. innerHTML(类似，小程序没有这个)
   2. 元素的属性上
   不能用在 标签名 和 属性名 上面，只能用在 值 上面
   -->


   <!-- <view class="world {{ viewClassName }}"></view> -->


   <!-- 
   可以直接使用字面量和简单的逻辑运算符
 -->

   <!-- <text>{{ 'hello' }}</text>
   <text>{{ 111 }}</text>
   <text>{{ 111 + 999 }}</text>
   <text>{{ 100 > 50 ? '你对了' : '你错了' }}</text> -->

<!-- 
  当语法解析误解了true和false的情况 可以使用mustache语法 {{}} 解决
 -->
  <!-- <checkbox checked='{{ false }}'></checkbox> -->



  <!-- 
  列表数据渲染 
  -->
<!-- <view>
  <checkbox></checkbox>
  <text>JavaScript</text>
</view>

<view>
  <checkbox></checkbox>
  <text>HTML</text>
</view>

<view>
  <checkbox></checkbox>
  <text>CSS</text>
</view> -->

<!-- <view wx:for="{{ todos }}" wx:key="todosid" wx:for-item="aaa" wx:for-index="i">
  <text>{{ i }}</text>
  <checkbox checked='{{ aaa.completed }}'></checkbox>
  <text>{{ aaa.name }}</text> -->
  <!-- 如果全局属性中有item这种关键词，可以使用wx:for-item去给当前遍历数据起名字 -->
  <!-- <text>{{ item }}</text> -->

  <!-- 
  基本的循环 wx:for
  1. 明确页面结构中的循环体
  2. 删除多余的重复内容，只保留一个
  3. 在剩下的这个上加上wx:for属性，属性值等于遍历的数据源，数据源必须是数组或对象
  4. 在这个标签（循环体）内部使用item代表当前被遍历的元素
  给被遍历到的对象定义名称 wx:for-item
  给遍历的下标 <索引> wx:for-index
   -->
   
<!-- </view>
<view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="i">
  <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="j">
    <view wx:if="{{i <= j}}">
      {{i}} * {{j}} = {{i * j}}
    </view>
  </view>
</view> -->



  <!-- <view class="userinfo">
    <button wx:if="{{!hasUserInfo && canIUse}}" open-type="getUserInfo" bindgetuserinfo="getUserInfo"> 获取头像昵称 </button>
    <block wx:else>
      <image bindtap="bindViewTap" class="userinfo-avatar" src="{{userInfo.avatarUrl}}" mode="cover"></image>
      <text class="userinfo-nickname">{{userInfo.nickName}}</text>
    </block>
  </view>
  <view class="usermotto">
    <text class="user-motto">{{motto}}</text>
  </view> -->

<!-- 基本的事件使用 就是通过给组件天剑一个 bind+事件名 的属性，属性的值指向一个定义在当前页面对象中的JS方法 -->
  <!-- <button bindtap='buttonTapHandle'>点我</button> -->

<!-- 事件冒泡 -->
 <!-- catch+事件名 是绑定事件并阻止冒泡 -->
<!-- <view  bindtap="outterHandle" style='width:200px;height:200px;background-color:red'>
 <view catchtap='innerHandle' style='width:100px;height:100px;background-color:blue'>
 </view>
</view> -->

<!-- 事件传参 -->
<button bindtap='tap2Handle' data-name="张三">点我</button>
<button bindtap='tap2Handle' data-hello-world="张三">点我</button>
<!--
1. 事件的基本使用 bind[xxx] catch[xxx]
2. 小程序中的事件冒泡和HTML中处理起来不一样 这里是使用catch[xxx]
3. 如果需要给事件处理函数指定参数只能通过dataset方式
 -->
</view>
